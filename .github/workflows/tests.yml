name: CI
on:
  push:
    branches:
    - master
    - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  #  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  # workflow_dispatch:
  #  # Allow this workflow to be run manually (pushing to testpypi instead of pypi)
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)
        required: false
        default: 'false'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number|| github.sha }}
  cancel-in-progress: true
jobs:
  # https://github.com/astral-sh/uv/blob/75c26229a2d8a9c2f249fd79f5fcf7b4d9ac77bb/.github/workflows/ci.yml#L88
  determine_changes:
    name: Determine changes
    runs-on: ubuntu-latest
    outputs:
      # Flag that is raised when any code is changed
      code: ${{ steps.changed.outputs.code_any_changed }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref_name }} and your repository is ${{ github.repository }}."
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: tj-actions/changed-files@v45
        id: changed
        with:
          files_yaml: |
            code:
              - "**/*"
              - "!docs/**/*"
              - "!mkdocs.*.yml"
              - "!**/*.md"
              - "!bin/**"
              - "!assets/**"
              # Generated markdown and JSON files are checked during test runs
              - "docs/reference/cli.md"
              - "docs/reference/settings.md"
              - "docs/configuration/environment.md"
              # - "uv.schema.json"
  # rspec:
  #   strategy:
  #     matrix:
  #       include:
  #         - os: macOS
  #           runner: macOS-latest
  #         - os: Linux
  #           runner: ubuntu-latest
  #   name: RSpec (${{ matrix.os }})
  #   runs-on: ${{ matrix.runner }}
  #   steps:
  #     - name: Set up Homebrew
  #       id: set-up-homebrew
  #       uses: Homebrew/actions/setup-homebrew@master

  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@32110d4e311bd8996b2a82bf2a43b714ccc91777 # v1.221.0
  #       with:
  #         bundler-cache: true

  #     - name: Run Homebrew/homebrew-test-bot RSpec tests
  #       run: bundle exec rspec

  tests:
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - os: macOS
            runner: macOS-latest
          # - os: Linux
          #   runner: ubuntu-latest
          #   workdir: /github/home
          #   container: '{"image": "ghcr.io/homebrew/ubuntu22.04:master", "options": "--user=linuxbrew"}'
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container && fromJSON(matrix.container) || '' }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.workdir || github.workspace }}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems
        if: steps.cache.outputs.cache-hit != 'true'
        run: brew install-bundler-gems

      # Allow debugging with tmate
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          # Use registered public SSH key(s)
          # If you have registered one or more public SSH keys with your GitHub profile, tmate will be started such that only those keys are authorized to connect, otherwise anybody can connect to the tmate session. If you want to require a public SSH key to be installed with the tmate session, no matter whether the user who started the workflow has registered any in their GitHub profile, you will need to configure the setting limit-access-to-actor to true, like so:
          limit-access-to-actor: true

      - run: brew test-bot --only-cleanup-before

      - run: brew test-bot --only-setup

      - run: brew test-bot --only-tap-syntax


      - run: brew test-bot --only-formulae
        if: github.event_name == 'pull_request'

      # - run: brew test-bot --only-formulae-detect --test-default-formula
      #   id: formulae-detect

      # - id: brew-test-bot-formulae
      #   run: |
      #     brew test-bot \
      #       --only-formulae \
      #       --junit \
      #       --only-json-tab \
      #       --skip-dependents \
      #       --testing-formulae="$TESTING_FORMULAE"
      #   env:
      #     HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     TESTING_FORMULAE: ${{ steps.formulae-detect.outputs.testing_formulae }}

      # - run: |
      #     brew test-bot --only-formulae-dependents --junit \
      #                   --testing-formulae="$TESTING_FORMULAE" \
      #                   --skipped-or-failed-formulae="$SKIPPED_OR_FAILED_FORMULAE"
      #   env:
      #     TESTING_FORMULAE: ${{ steps.formulae-detect.outputs.testing_formulae }}
      #     SKIPPED_OR_FAILED_FORMULAE: ${{ steps.brew-test-bot-formulae.outputs.skipped_or_failed_formulae }}

      # - name: Output brew test-bot failures
      #   run: |
      #     cat steps_output.txt
      #     rm steps_output.txt

      # - name: Output brew bottle output
      #   run: |
      #     cat bottle_output.txt
      #     rm bottle_output.txt

      # - run: brew test-bot --only-cleanup-after

      # - run: rm -rvf -- *.bottle*.{json,tar.gz}

      # - run: brew test-bot --only-setup --dry-run

      # - run: brew test-bot testbottest --only-formulae --dry-run
